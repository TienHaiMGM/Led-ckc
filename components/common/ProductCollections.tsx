import Link from "next/link";
import React, { useState, useEffect } from "react";
import { useProductEditor } from "../api/hooks/useProductEditor";
import { ITEMS_PER_PAGE, categoryOptions } from "@/utils/constants";
import ProductCard from "./ProductCard";
import { motion } from "framer-motion";
import { scrollToTop } from "../../utils/scrollToTop";
import { useSearchParams } from "next/navigation"; // Import hook ƒë·ªÉ l·∫•y query t·ª´ URL

import {
  removeDiacritics,
  getSearchHistory,
  saveToSearchHistory,
  clearSearchHistory,
  searchProducts,
} from "../../utils/searchUtils"; // Import c√°c h√†m t√¨m ki·∫øm

interface ProductManagerProps {
  EditorContent: any;
  searchQuery?: string;
  currentPage?: number;
  setCurrentPage?: (page: number) => void;
}

const ProductCollections: React.FC<ProductManagerProps> = ({
  EditorContent,
  searchQuery = "",
  currentPage = 1,
  setCurrentPage = () => {},
}) => {
  const { products, loading, error } = useProductEditor(EditorContent);
  const [selectedCategory, setSelectedCategory] = useState("T·∫•t c·∫£");
  const [filteredProducts, setFilteredProducts] = useState(products);
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [debouncedQuery, setDebouncedQuery] = useState(searchQuery); // State debounce
  const categories = ["T·∫•t c·∫£", ...categoryOptions.map((cat) => cat.label)];
  const searchParams = useSearchParams(); // L·∫•y query t·ª´ URL
  const queryFromURL = searchParams.get("q") || ""; // L·∫•y gi√° tr·ªã "q" t·ª´ URL

  useEffect(() => {
    if (!products) return;
    setSearchHistory(getSearchHistory()); // Load l·ªãch s·ª≠ t√¨m ki·∫øm khi component mount
    let filtered = [...products];
    if (queryFromURL) {
      const query = removeDiacritics(queryFromURL); // X·ª≠ l√Ω t√¨m ki·∫øm kh√¥ng d·∫•u
      filtered = searchProducts(products, query);
      saveToSearchHistory(query);
      setSearchHistory(getSearchHistory()); // C·∫≠p nh·∫≠t l·ªãch s·ª≠ t√¨m ki·∫øm
      scrollToTop(150);
      setFilteredProducts(filtered);
    }
  }, [products, queryFromURL]);

  // ‚è≥ Debounce search query (Ch·ªâ c·∫≠p nh·∫≠t `debouncedQuery` sau 1 gi√¢y khi ng∆∞·ªùi d√πng d·ª´ng nh·∫≠p)
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 1000); // ‚è≥ Ch·ªù 1 gi√¢y tr∆∞·ªõc khi c·∫≠p nh·∫≠t

    return () => clearTimeout(timer); // H·ªßy timer n·∫øu ng∆∞·ªùi d√πng nh·∫≠p ti·∫øp
  }, [searchQuery]);

  // C·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m khi d·ªØ li·ªáu thay ƒë·ªïi ho·∫∑c khi debounce ho√†n t·∫•t
  useEffect(() => {
    if (!products) return;
    let filtered = [...products];

    if (selectedCategory !== "T·∫•t c·∫£") {
      const categoryValue =
        categoryOptions.find((cat) => cat.label === selectedCategory)?.value ||
        "";
      filtered = filtered.filter((item) => item.category === categoryValue);
    }

    if (debouncedQuery) {
      const query = removeDiacritics(debouncedQuery); // B·ªè d·∫•u tr∆∞·ªõc khi t√¨m ki·∫øm
      saveToSearchHistory(query); // L∆∞u v√†o l·ªãch s·ª≠ t√¨m ki·∫øm
      setSearchHistory(getSearchHistory()); // C·∫≠p nh·∫≠t l·ªãch s·ª≠ t√¨m ki·∫øm

      filtered = searchProducts(filtered, query);
    }

    setFilteredProducts(filtered);
    setCurrentPage(1);
  }, [products, selectedCategory, debouncedQuery, setCurrentPage]);

  const handleClearSearchHistory = () => {
    clearSearchHistory();
    setSearchHistory([]);
  };

  return (
    <div>
      <section className="py-2">
        <div className="container mx-auto px-4">
          {/* L·ªãch s·ª≠ t√¨m ki·∫øm */}
          <div className="mb-2">
            <h3 className="text-lg font-semibold">L·ªãch s·ª≠ t√¨m ki·∫øm</h3>
            {searchHistory.length > 0 ? (
              <div className="mt-2 flex flex-wrap gap-2">
                {searchHistory.map((query, index) => (
                  <span
                    key={index}
                    className="cursor-pointer rounded-lg bg-gray-200 px-3 py-1 text-sm hover:bg-gray-300"
                    onClick={() =>
                      setFilteredProducts(searchProducts(products, query))
                    }
                  >
                    {query}
                  </span>
                ))}
                <button
                  onClick={handleClearSearchHistory}
                  className="ml-4 text-sm text-red-500 hover:underline"
                >
                  X√≥a l·ªãch s·ª≠
                </button>
              </div>
            ) : (
              <p className="text-gray-500">Kh√¥ng c√≥ l·ªãch s·ª≠ t√¨m ki·∫øm.</p>
            )}
          </div>

          {/* Danh m·ª•c s·∫£n ph·∫©m */}
          <div className="top-0 z-20 mb-8 bg-white shadow-sm">
            <div className="container mx-auto">
              <div className="flex flex-wrap gap-3 py-4">
                {categories.map((category) => (
                  <button
                    key={category}
                    onClick={() => setSelectedCategory(category)}
                    className={`rounded-full px-4 py-2 text-sm transition-colors md:text-base ${
                      selectedCategory === category
                        ? "bg-red-600 text-white"
                        : "bg-gray-100 text-gray-700 hover:bg-gray-200"
                    }`}
                  >
                    {category}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m */}
          <motion.div
            key={selectedCategory + debouncedQuery}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
          >
            {filteredProducts.map((item) => (
              <ProductCard
                key={item.id}
                images={item.images}
                title={item.title}
                description={item.description}
                slug={item.slug}
                href={`/chi-tiet-san-pham/`} // üî• Th√™m slug v√†o URL
              />
            ))}
          </motion.div>
        </div>
      </section>
    </div>
  );
};

export default ProductCollections;
